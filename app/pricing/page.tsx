"use client";

import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useSearchParams } from "next/navigation";
import SubscriptionStatus from "@/components/SubscriptionStatus";

export default function PricingPage() {
    const [selectedPlan, setSelectedPlan] = useState<string | null>(null);
    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState<{
        type: "success" | "error";
        text: string;
    } | null>(null);
    const { data: session } = useSession();
    const searchParams = useSearchParams();

    // X·ª≠ l√Ω th√¥ng b√°o t·ª´ URL params
    useEffect(() => {
        const success = searchParams.get("success");
        const error = searchParams.get("error");
        const plan = searchParams.get("plan");

        if (success === "true" && plan) {
            setMessage({
                type: "success",
                text: `Thanh to√°n th√†nh c√¥ng! G√≥i ${plan} ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.`,
            });
        } else if (error) {
            let errorText = "C√≥ l·ªói x·∫£y ra";
            switch (error) {
                case "payment_failed":
                    errorText = "Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                case "invalid_signature":
                    errorText = "L·ªói x√°c th·ª±c thanh to√°n.";
                    break;
                case "user_not_found":
                    errorText = "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.";
                    break;
                default:
                    errorText = "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n.";
            }
            setMessage({
                type: "error",
                text: errorText,
            });
        }
    }, [searchParams]);

    const sellerPlans = [
        {
            id: "basic",
            title: "G√≥i C∆° B·∫£n",
            price: "Mi·ªÖn ph√≠",
            description:
                "ƒêƒÉng 5 tin/th√°ng mi·ªÖn ph√≠. D√πng AI ƒë·ªãnh gi√° 3 l·∫ßn/th√°ng.",
            features: [
                "ƒêƒÉng 5 tin/th√°ng free",
                "ƒê∆∞·ª£c d√πng AI ƒë·ªãnh gi√° 3 l·∫ßn/th√°ng",
            ],
            isPopular: false,
            color: "green",
        },
        {
            id: "vip",
            title: "G√≥i VIP",
            price: "150.000‚Ç´",
            description:
                "ƒêƒÉng kh√¥ng gi·ªõi h·∫°n. ƒê·∫©y 7 tin trong 7 ng√†y li√™n ti·∫øp/khung gi·ªù t·ª± ch·ªçn. Ki·ªÉm duy·ªát nhanh trong 1h. AI ƒë·ªãnh gi√° kh√¥ng gi·ªõi h·∫°n.",
            features: [
                "ƒêƒÉng kh√¥ng gi·ªõi h·∫°n",
                "ƒê·∫©y 7 tin trong 7 ng√†y li√™n ti·∫øp trong 1 khung gi·ªù t·ª± ch·ªçn",
                "H·ªó tr·ª£ ki·ªÉm duy·ªát nhanh trong v√≤ng 1h",
                "ƒê∆∞·ª£c d√πng AI ƒë·ªãnh gi√° kh√¥ng gi·ªõi h·∫°n",
                "B√°o c√°o hi·ªáu su·∫•t & c√¥ng c·ª• qu·∫£n l√Ω kh√°ch h√†ng",
                "∆Øu ti√™n hi·ªÉn th·ªã tr√™n danh m·ª•c",
            ],
            isPopular: true,
            color: "blue",
        },
        {
            id: "pro",
            title: "G√≥i Pro",
            price: "50.000‚Ç´",
            description:
                "ƒêƒÉng 15 tin/th√°ng. ƒê·∫©y 3 tin trong 3 ng√†y/khung gi·ªù t·ª± ch·ªçn. AI ƒë·ªãnh gi√° 3-5 l·∫ßn/ng√†y.",
            features: [
                "ƒêƒÉng 15 tin/th√°ng",
                "ƒê·∫©y 3 tin trong 3 ng√†y trong 1 khung gi·ªù t·ª± ch·ªçn",
                "ƒê∆∞·ª£c d√πng AI ƒë·ªãnh gi√° t·ª´ 3-5 l·∫ßn/ng√†y",
            ],
            isPopular: false,
            color: "orange",
        },
    ];

    const pushPlans = [
        {
            id: "push-single",
            title: "G√≥i ƒê·∫©y Tin L·∫ª",
            price: "20.000‚Ç´/tin",
            description:
                "Mua 5 tin tr·ªü l√™n c√≤n 75.000‚Ç´/5 tin. ƒê·∫©y 5 tin trong 7 ng√†y/khung gi·ªù t·ª± ch·ªçn. ƒê·∫©y tin theo t·ª´ kho√°, c√° nh√¢n ho√° t√¨m ki·∫øm s·∫£n ph·∫©m.",
            features: [
                "20k/tin",
                "Mua 5 tin tr·ªü l√™n c√≤n 75k/5 tin",
                "ƒê·∫©y 5 tin trong 7 ng√†y v√†o 1 khung gi·ªù t·ª± ch·ªçn",
                "ƒê·∫©y tin theo t·ª´ kho√°, c√° nh√¢n ho√° t√¨m ki·∫øm s·∫£n ph·∫©m",
            ],
            isPopular: false,
            color: "purple",
        },
    ];

    const handlePlanSelect = async (planId: string) => {
        if (!session?.user) {
            setMessage({
                type: "error",
                text: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng k√Ω g√≥i d·ªãch v·ª•.",
            });
            return;
        }

        setLoading(true);
        setMessage(null);

        try {
            const response = await fetch("/api/payment/subscription", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ planId }),
            });

            const data = await response.json();

            console.log("API Response:", data);

            if (data.success) {
                if (planId === "basic") {
                    // G√≥i basic ƒë∆∞·ª£c k√≠ch ho·∫°t ngay l·∫≠p t·ª©c
                    setMessage({
                        type: "success",
                        text: "G√≥i Basic ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng!",
                    });
                    // Reload trang ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
                    window.location.reload();
                } else {
                    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn VNPay cho c√°c g√≥i tr·∫£ ph√≠
                    console.log("Redirecting to VNPay:", data.paymentUrl);
                    window.location.href = data.paymentUrl;
                }
            } else {
                setMessage({
                    type: "error",
                    text: data.error || "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω g√≥i.",
                });
            }
        } catch (error) {
            console.error("Error subscribing to plan:", error);
            setMessage({
                type: "error",
                text: "C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn server.",
            });
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className='min-h-screen bg-gradient-to-br from-background via-background to-muted/20'>
            <div className='container mx-auto px-4 py-16 max-w-5xl'>
                {/* Header */}
                <div className='text-center mb-16'>
                    <h1 className='text-4xl md:text-5xl font-bold text-foreground mb-6'>
                        B·∫£ng gi√° d·ªãch v·ª•
                    </h1>
                    <p className='text-xl text-muted-foreground max-w-3xl mx-auto'>
                        L·ª±a ch·ªçn g√≥i ph√π h·ª£p v·ªõi nhu c·∫ßu ƒëƒÉng tin v√† ƒë·∫©y tin c·ªßa
                        b·∫°n
                    </p>
                </div>

                {/* Th√¥ng b√°o */}
                {message && (
                    <div
                        className={`mb-8 p-4 rounded-lg ${
                            message.type === "success"
                                ? "bg-green-100 border border-green-400 text-green-700"
                                : "bg-red-100 border border-red-400 text-red-700"
                        }`}
                    >
                        {message.text}
                    </div>
                )}

                {/* Hi·ªÉn th·ªã tr·∫°ng th√°i g√≥i hi·ªán t·∫°i */}
                {session?.user && (
                    <div className='mb-8'>
                        <h2 className='text-xl font-semibold text-foreground mb-4'>
                            G√≥i d·ªãch v·ª• hi·ªán t·∫°i
                        </h2>
                        <SubscriptionStatus />
                    </div>
                )}

                {/* Seller Plans */}
                <h2 className='text-2xl font-bold text-foreground mb-6'>
                    G√≥i d√†nh cho ng∆∞·ªùi b√°n
                </h2>
                <div className='grid md:grid-cols-3 gap-8 mb-12'>
                    {sellerPlans.map((plan) => (
                        <div
                            key={plan.id}
                            className={`relative flex flex-col bg-card rounded-2xl p-8 shadow-lg border transition-all duration-300 hover:shadow-xl min-h-[480px] ${
                                plan.isPopular
                                    ? "ring-2 ring-primary scale-105"
                                    : ""
                            }`}
                        >
                            {/* Popular Badge */}
                            {plan.isPopular && (
                                <div className='absolute -top-4 left-1/2 transform -translate-x-1/2 z-10'>
                                    <span className='bg-primary text-primary-foreground px-4 py-2 rounded-full text-sm font-semibold shadow'>
                                        G√≥i n·ªïi b·∫≠t
                                    </span>
                                </div>
                            )}
                            <div className='flex flex-col items-center flex-1'>
                                <div
                                    className={`inline-block text-5xl mb-4 mt-2 ${
                                        plan.color === "green"
                                            ? "text-green-500"
                                            : plan.color === "orange"
                                            ? "text-orange-500"
                                            : "text-blue-500"
                                    }`}
                                >
                                    {plan.id === "basic"
                                        ? "üÜì"
                                        : plan.id === "pro"
                                        ? "‚≠ê"
                                        : "üëë"}
                                </div>
                                <h3 className='text-xl font-bold text-foreground mb-1 text-center'>
                                    {plan.title}
                                </h3>
                                <div className='text-2xl font-bold text-foreground mb-2 text-center'>
                                    {plan.price}
                                </div>
                                <p className='text-muted-foreground text-sm mb-4 text-center min-h-[48px] flex items-center justify-center'>
                                    {plan.description}
                                </p>
                                <ul className='space-y-2 mb-8 w-full'>
                                    {plan.features.map((feature, idx) => (
                                        <li
                                            key={idx}
                                            className='flex items-start gap-2'
                                        >
                                            <svg
                                                className='w-5 h-5 text-green-500 mt-0.5 flex-shrink-0'
                                                fill='currentColor'
                                                viewBox='0 0 20 20'
                                            >
                                                <path
                                                    fillRule='evenodd'
                                                    d='M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z'
                                                    clipRule='evenodd'
                                                />
                                            </svg>
                                            <span className='text-sm text-foreground'>
                                                {feature}
                                            </span>
                                        </li>
                                    ))}
                                </ul>
                                <div className='flex-1' />
                            </div>
                            <button
                                onClick={() => handlePlanSelect(plan.id)}
                                disabled={loading}
                                className={`mt-auto w-full py-3 px-6 rounded-lg font-semibold transition-all duration-200 ${
                                    plan.isPopular
                                        ? "bg-primary text-primary-foreground hover:bg-primary/90 disabled:opacity-50"
                                        : "border border-primary text-primary hover:bg-primary/10 disabled:opacity-50"
                                }`}
                            >
                                {loading ? "ƒêang x·ª≠ l√Ω..." : "ƒêƒÉng k√Ω ngay"}
                            </button>
                        </div>
                    ))}
                </div>

                {/* Push Plans */}
                <h2 className='text-2xl font-bold text-foreground mb-6'>
                    G√≥i ƒë·∫©y tin l·∫ª
                </h2>
                <div className='grid md:grid-cols-2 gap-8 mb-12'>
                    {pushPlans.map((plan) => (
                        <div
                            key={plan.id}
                            className='relative bg-card rounded-2xl p-8 shadow-lg border transition-all duration-300 hover:shadow-xl'
                        >
                            <div className='text-center mb-6'>
                                <div className='inline-block text-5xl mb-4 text-purple-500'>
                                    üì¢
                                </div>
                            </div>
                            <div className='text-center mb-6'>
                                <h3 className='text-xl font-bold text-foreground mb-2'>
                                    {plan.title}
                                </h3>
                                <div className='text-2xl font-bold text-foreground mb-1'>
                                    {plan.price}
                                </div>
                                <p className='text-muted-foreground text-sm mb-2'>
                                    {plan.description}
                                </p>
                            </div>
                            <ul className='space-y-2 mb-8'>
                                {plan.features.map((feature, idx) => (
                                    <li
                                        key={idx}
                                        className='flex items-start gap-2'
                                    >
                                        <svg
                                            className='w-5 h-5 text-green-500 mt-0.5 flex-shrink-0'
                                            fill='currentColor'
                                            viewBox='0 0 20 20'
                                        >
                                            <path
                                                fillRule='evenodd'
                                                d='M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z'
                                                clipRule='evenodd'
                                            />
                                        </svg>
                                        <span className='text-sm text-foreground'>
                                            {feature}
                                        </span>
                                    </li>
                                ))}
                            </ul>
                            <button
                                onClick={() => handlePlanSelect(plan.id)}
                                disabled={loading}
                                className='w-full py-3 px-6 rounded-lg font-semibold bg-purple-600 text-white hover:bg-purple-700 transition-all duration-200 disabled:opacity-50'
                            >
                                {loading ? "ƒêang x·ª≠ l√Ω..." : "ƒêƒÉng k√Ω ngay"}
                            </button>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
}
